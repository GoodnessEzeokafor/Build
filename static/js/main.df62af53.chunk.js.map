{"version":3,"sources":["components/countdown/Countdown.js","hoc/aux.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","state","days","undefined","hours","minutes","seconds","this","interval","setInterval","props","then","timeTillDate","timeFormat","moment","now","countdown","format","setState","clearInterval","className","style","backgroundImage","Component","aux","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAKqBA,E,2MACpBC,MAAQ,CACPC,UAAMC,EACAC,WAAOD,EACPE,aAASF,EACTG,aAASH,G,mFAEK,IAAD,OACbI,KAAKC,SAAWC,aAAY,WAAO,IAAD,EACO,EAAKC,MACpCC,GAFwB,EACtBC,aADsB,EACRC,WACTC,IAAO,aAAc,eAC5BC,EAAMD,MACNE,EAAYF,IAAOH,EAAOI,GAC1Bb,EAAOc,EAAUC,OAAO,KACxBb,EAAQY,EAAUC,OAAO,MACzBZ,EAAUW,EAAUC,OAAO,MAC3BX,EAAUU,EAAUC,OAAO,MAEjC,EAAKC,SAAS,CAAEhB,OAAME,QAAOC,UAASC,cACvC,O,6CAICC,KAAKC,UACLW,cAAcZ,KAAKC,Y,+BAIpB,IAAD,EACkCD,KAAKN,MAAvCC,EADA,EACAA,KAAME,EADN,EACMA,MAAOC,EADb,EACaA,QAASC,EADtB,EACsBA,QAC9B,OACA,yBACcc,UAAU,qEACVC,MAAO,CAAEC,gBAAiB,2BACxC,yBAAKF,UAAU,UACd,uBAAGA,UAAU,qBACZ,uBAAGA,UAAU,uCAGd,wBAAIA,UAAU,6BAAd,eAIA,uBAAGA,UAAU,6BAAb,4FAIA,yBAAKA,UAAU,mEACd,yBAAKA,UAAU,8BACjB,0BAAMA,UAAU,sBAAsBlB,GACnC,0BAAMkB,UAAU,WAAhB,SAGD,0BAAMA,UAAU,kBAAhB,KAEA,yBAAKA,UAAU,8BACjB,0BAAMA,UAAU,uBAAuBhB,GACpC,0BAAMgB,UAAU,WAAhB,UAGD,0BAAMA,UAAU,0BAAhB,KAEA,yBAAKA,UAAU,8BACjB,0BAAMA,UAAU,yBAAyBf,GACtC,0BAAMe,UAAU,WAAhB,YAGD,0BAAMA,UAAU,kBAAhB,KAEA,yBAAKA,UAAU,8BACjB,0BAAMA,UAAU,yBAAyBd,GACtC,0BAAMc,UAAU,WAAhB,mB,GAvEkCG,aCFxBC,EAHH,SAACd,GAAD,OAAWA,EAAMe,UCKRC,E,iLAEjB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GAJyBH,aCObI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.df62af53.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from \"moment\";\n\n\n\nexport default class Countdown extends Component {\n\tstate = {\n\t\tdays: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n\t}\n\tcomponentDidMount() {\n        this.interval = setInterval(() => {\n            const { timeTillDate, timeFormat } = this.props;\n            const then = moment('21/03/2020', 'DD/MM/YYYY');\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n\n            this.setState({ days, hours, minutes, seconds });\n        }, 1000);\n\t}\n\t\n\tcomponentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n\trender() {\n\t\tconst { days, hours, minutes, seconds } = this.state;\n\t\treturn (\n\t\t<div \n                className=\"bg-img1 overlay1 size1 flex-w flex-c-m p-t-55 p-b-55 p-l-15 p-r-15\" \n                style={{ backgroundImage: \"url('images/bg01.jpg')\" }}>\n\t\t<div className=\"wsize1\">\n\t\t\t<p className=\"txt-center p-b-23\">\n\t\t\t\t<i className=\"zmdi zmdi-card-giftcard cl0 fs-60\"></i>\n\t\t\t</p>\n\n\t\t\t<h3 className=\"l1-txt1 txt-center p-b-22\">\n\t\t\t\tComing Soon\n\t\t\t</h3>\n\n\t\t\t<p className=\"txt-center m2-txt1 p-b-67\">\n\t\t\t\tElesarr first decentralized crowdfunding application launching on the 20th of March 2020 \n\t\t\t</p>\n\n\t\t\t<div className=\"flex-w flex-sa-m cd100 bor1 p-t-42 p-b-22 p-l-50 p-r-50 respon1\">\n\t\t\t\t<div className=\"flex-col-c-m wsize2 m-b-20\">\n\t\t<span className=\"l1-txt2 p-b-4 days\">{days}</span>\n\t\t\t\t\t<span className=\"m2-txt2\">Days</span>\n\t\t\t\t</div>\n\n\t\t\t\t<span className=\"l1-txt2 p-b-22\">:</span>\n\t\t\t\t\n\t\t\t\t<div className=\"flex-col-c-m wsize2 m-b-20\">\n\t\t<span className=\"l1-txt2 p-b-4 hours\">{hours}</span>\n\t\t\t\t\t<span className=\"m2-txt2\">Hours</span>\n\t\t\t\t</div>\n\n\t\t\t\t<span className=\"l1-txt2 p-b-22 respon2\">:</span>\n\n\t\t\t\t<div className=\"flex-col-c-m wsize2 m-b-20\">\n\t\t<span className=\"l1-txt2 p-b-4 minutes\">{minutes}</span>\n\t\t\t\t\t<span className=\"m2-txt2\">Minutes</span>\n\t\t\t\t</div>\n\n\t\t\t\t<span className=\"l1-txt2 p-b-22\">:</span>\n\n\t\t\t\t<div className=\"flex-col-c-m wsize2 m-b-20\">\n\t\t<span className=\"l1-txt2 p-b-4 seconds\">{seconds}</span>\n\t\t\t\t\t<span className=\"m2-txt2\">Seconds</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* <form className=\"flex-w flex-c-m contact100-form validate-form p-t-70\">\n\t\t\t\t<div className=\"wrap-input100 validate-input where1\" data-validate = \"Email is required: ex@abc.xyz\">\n                    <input \n                        className=\"s1-txt1 placeholder0 input100\" \n                        type=\"text\" name=\"email\" placeholder=\"Email Address\" />\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"flex-c-m s1-txt1 size2 how-btn trans-04 where1\">\n\t\t\t\t\tNotify Me\n\t\t\t\t</button>\n\t\t\t</form>\t\t\t */}\n\t\t</div>\n\t</div>\n\t\t);\n\t}\n}","const aux = (props) => props.children;\n\n\nexport default aux\n","import React, { Component } from 'react';\nimport Countdown from \"./components/countdown/Countdown\"\nimport Aux from \"./hoc/aux.js\"\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Aux>\n        <Countdown />\n      </Aux>\n    );\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}